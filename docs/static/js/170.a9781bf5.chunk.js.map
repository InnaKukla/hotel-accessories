{"version":3,"file":"static/js/170.a9781bf5.chunk.js","mappings":"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","sources":["../node_modules/@mui/system/esm/RtlProvider/index.js","../node_modules/@mui/utils/esm/useControlled/useControlled.js","../node_modules/@mui/material/utils/useSlot.js","../node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js","../node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js","../node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js","../node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js","../node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js","../node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js","../node_modules/@mui/material/SvgIcon/svgIconClasses.js","../node_modules/@mui/material/SvgIcon/SvgIcon.js","../node_modules/@mui/material/utils/createSvgIcon.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RtlContext = /*#__PURE__*/React.createContext();\nfunction RtlProvider({\n  value,\n  ...props\n}) {\n  return /*#__PURE__*/_jsx(RtlContext.Provider, {\n    value: value ?? true,\n    ...props\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RtlProvider.propTypes = {\n  children: PropTypes.node,\n  value: PropTypes.bool\n} : void 0;\nexport const useRtl = () => {\n  const value = React.useContext(RtlContext);\n  return value ?? false;\n};\nexport default RtlProvider;","'use client';\n\n// TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- process.env never changes, dependency arrays are intentionally ignored\n/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled({\n  controlled,\n  default: defaultProp,\n  name,\n  state = 'value'\n}) {\n  // isControlled is ignored in the hook dependency lists as it should never change.\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [state, name, controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      // Object.is() is not equivalent to the === operator.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is for more details.\n      if (!isControlled && !Object.is(defaultValue, defaultProp)) {\n        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nimport appendOwnerState from '@mui/utils/appendOwnerState';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    internalForwardedProps,\n    shouldForwardComponentProp = false,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && !shouldForwardComponentProp && {\n      as: LeafComponent\n    }),\n    ...(LeafComponent && shouldForwardComponentProp && {\n      component: LeafComponent\n    }),\n    ref\n  }, ownerState);\n  return [elementType, props];\n}","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}\nexport default resolveComponentProps;","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default extractEventHandlers;","/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nfunction isHostComponent(element) {\n  return typeof element === 'string';\n}\nexport default isHostComponent;","import isHostComponent from \"../isHostComponent/index.js\";\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return {\n    ...otherProps,\n    ownerState: {\n      ...otherProps.ownerState,\n      ...ownerState\n    }\n  };\n}\nexport default appendOwnerState;","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nfunction omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default omitEventHandlers;","import clsx from 'clsx';\nimport extractEventHandlers from \"../extractEventHandlers/index.js\";\nimport omitEventHandlers from \"../omitEventHandlers/index.js\";\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n    const mergedStyle = {\n      ...additionalProps?.style,\n      ...externalForwardedProps?.style,\n      ...externalSlotProps?.style\n    };\n    const props = {\n      ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers({\n    ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n  const mergedStyle = {\n    ...internalSlotProps?.style,\n    ...additionalProps?.style,\n    ...externalForwardedProps?.style,\n    ...externalSlotProps?.style\n  };\n  const props = {\n    ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\nexport default mergeSlotProps;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSvgIconUtilityClass(slot) {\n  return generateUtilityClass('MuiSvgIcon', slot);\n}\nconst svgIconClasses = generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);\nexport default svgIconClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSvgIconUtilityClass } from \"./svgIconClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    fontSize,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]\n  };\n  return composeClasses(slots, getSvgIconUtilityClass, classes);\n};\nconst SvgIconRoot = styled('svg', {\n  name: 'MuiSvgIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  userSelect: 'none',\n  width: '1em',\n  height: '1em',\n  display: 'inline-block',\n  flexShrink: 0,\n  transition: theme.transitions?.create?.('fill', {\n    duration: (theme.vars ?? theme).transitions?.duration?.shorter\n  }),\n  variants: [{\n    props: props => !props.hasSvgAsChild,\n    style: {\n      // the <svg> will define the property that has `currentColor`\n      // for example heroicons uses fill=\"none\" and stroke=\"currentColor\"\n      fill: 'currentColor'\n    }\n  }, {\n    props: {\n      fontSize: 'inherit'\n    },\n    style: {\n      fontSize: 'inherit'\n    }\n  }, {\n    props: {\n      fontSize: 'small'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(20) || '1.25rem'\n    }\n  }, {\n    props: {\n      fontSize: 'medium'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(24) || '1.5rem'\n    }\n  }, {\n    props: {\n      fontSize: 'large'\n    },\n    style: {\n      fontSize: theme.typography?.pxToRem?.(35) || '2.1875rem'\n    }\n  },\n  // TODO v5 deprecate color prop, v6 remove for sx\n  ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.[color]?.main\n    }\n  })), {\n    props: {\n      color: 'action'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.active\n    }\n  }, {\n    props: {\n      color: 'disabled'\n    },\n    style: {\n      color: (theme.vars ?? theme).palette?.action?.disabled\n    }\n  }, {\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: undefined\n    }\n  }]\n})));\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSvgIcon'\n  });\n  const {\n    children,\n    className,\n    color = 'inherit',\n    component = 'svg',\n    fontSize = 'medium',\n    htmlColor,\n    inheritViewBox = false,\n    titleAccess,\n    viewBox = '0 0 24 24',\n    ...other\n  } = props;\n  const hasSvgAsChild = /*#__PURE__*/React.isValidElement(children) && children.type === 'svg';\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    fontSize,\n    instanceFontSize: inProps.fontSize,\n    inheritViewBox,\n    viewBox,\n    hasSvgAsChild\n  };\n  const more = {};\n  if (!inheritViewBox) {\n    more.viewBox = viewBox;\n  }\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SvgIconRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    focusable: \"false\",\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref,\n    ...more,\n    ...other,\n    ...(hasSvgAsChild && children.props),\n    ownerState: ownerState,\n    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/_jsx(\"title\", {\n      children: titleAccess\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox: PropTypes.bool,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default SvgIcon;","'use client';\n\nimport * as React from 'react';\nimport SvgIcon from \"../SvgIcon/index.js\";\n\n/**\n * Private module reserved for @mui packages.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createSvgIcon(path, displayName) {\n  function Component(props, ref) {\n    return /*#__PURE__*/_jsx(SvgIcon, {\n      \"data-testid\": `${displayName}Icon`,\n      ref: ref,\n      ...props,\n      children: path\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = `${displayName}Icon`;\n  }\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(Component));\n}"],"names":["RtlContext","React","useRtl","useControlled","_ref","controlled","default","defaultProp","name","state","current","isControlled","undefined","valueState","setValue","newValue","useSlot","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","internalForwardedProps","shouldForwardComponentProp","useSlotPropsParams","component","rootComponent","slots","slotProps","other","resolvedComponentsProps","resolveComponentProps","props","slotComponent","mergedProps","internalRef","mergeSlotProps","externalSlotProps","ref","useForkRef","LeafComponent","appendOwnerState","as","componentProps","slotState","object","excludeKeys","arguments","length","result","Object","keys","filter","prop","match","includes","forEach","element","otherProps","isHostComponent","getSlotProps","additionalProps","joinedClasses","clsx","mergedStyle","style","eventHandlers","extractEventHandlers","componentsPropsWithoutEventHandlers","omitEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","getSvgIconUtilityClass","slot","generateUtilityClass","generateUtilityClasses","SvgIconRoot","styled","overridesResolver","styles","root","color","capitalize","fontSize","memoTheme","theme","userSelect","width","height","display","flexShrink","transition","transitions","create","duration","vars","shorter","variants","hasSvgAsChild","fill","typography","pxToRem","entries","palette","_ref2","value","main","map","_ref3","action","active","disabled","SvgIcon","inProps","useDefaultProps","children","htmlColor","inheritViewBox","titleAccess","viewBox","type","instanceFontSize","more","classes","composeClasses","useUtilityClasses","_jsxs","focusable","role","_jsx","muiName","createSvgIcon","path","displayName","Component"],"sourceRoot":""}